// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: PdfComposeService.proto

package pdfcompose

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Files struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpFile1 []byte `protobuf:"bytes,1,opt,name=UpFile1,proto3" json:"UpFile1,omitempty"`
	UpFile2 []byte `protobuf:"bytes,2,opt,name=UpFile2,proto3" json:"UpFile2,omitempty"`
	UpFile3 []byte `protobuf:"bytes,3,opt,name=UpFile3,proto3" json:"UpFile3,omitempty"`
}

func (x *Files) Reset() {
	*x = Files{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PdfComposeService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Files) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Files) ProtoMessage() {}

func (x *Files) ProtoReflect() protoreflect.Message {
	mi := &file_PdfComposeService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Files.ProtoReflect.Descriptor instead.
func (*Files) Descriptor() ([]byte, []int) {
	return file_PdfComposeService_proto_rawDescGZIP(), []int{0}
}

func (x *Files) GetUpFile1() []byte {
	if x != nil {
		return x.UpFile1
	}
	return nil
}

func (x *Files) GetUpFile2() []byte {
	if x != nil {
		return x.UpFile2
	}
	return nil
}

func (x *Files) GetUpFile3() []byte {
	if x != nil {
		return x.UpFile3
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PdfFile []byte `protobuf:"bytes,1,opt,name=PdfFile,proto3" json:"PdfFile,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PdfComposeService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_PdfComposeService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_PdfComposeService_proto_rawDescGZIP(), []int{1}
}

func (x *File) GetPdfFile() []byte {
	if x != nil {
		return x.PdfFile
	}
	return nil
}

var File_PdfComposeService_proto protoreflect.FileDescriptor

var file_PdfComposeService_proto_rawDesc = []byte{
	0x0a, 0x17, 0x50, 0x64, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x05, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x55, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55,
	0x70, 0x46, 0x69, 0x6c, 0x65, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x70, 0x46, 0x69, 0x6c, 0x65,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x32,
	0x12, 0x18, 0x0a, 0x07, 0x55, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x55, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x33, 0x22, 0x20, 0x0a, 0x04, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x64, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x64, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x32, 0x3e, 0x0a, 0x08,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x15, 0x5a, 0x13,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x64, 0x66, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_PdfComposeService_proto_rawDescOnce sync.Once
	file_PdfComposeService_proto_rawDescData = file_PdfComposeService_proto_rawDesc
)

func file_PdfComposeService_proto_rawDescGZIP() []byte {
	file_PdfComposeService_proto_rawDescOnce.Do(func() {
		file_PdfComposeService_proto_rawDescData = protoimpl.X.CompressGZIP(file_PdfComposeService_proto_rawDescData)
	})
	return file_PdfComposeService_proto_rawDescData
}

var file_PdfComposeService_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_PdfComposeService_proto_goTypes = []interface{}{
	(*Files)(nil), // 0: composer.Files
	(*File)(nil),  // 1: composer.File
}
var file_PdfComposeService_proto_depIdxs = []int32{
	0, // 0: composer.Composer.ComposeFile:input_type -> composer.Files
	1, // 1: composer.Composer.ComposeFile:output_type -> composer.File
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_PdfComposeService_proto_init() }
func file_PdfComposeService_proto_init() {
	if File_PdfComposeService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_PdfComposeService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Files); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PdfComposeService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_PdfComposeService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_PdfComposeService_proto_goTypes,
		DependencyIndexes: file_PdfComposeService_proto_depIdxs,
		MessageInfos:      file_PdfComposeService_proto_msgTypes,
	}.Build()
	File_PdfComposeService_proto = out.File
	file_PdfComposeService_proto_rawDesc = nil
	file_PdfComposeService_proto_goTypes = nil
	file_PdfComposeService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ComposerClient is the client API for Composer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComposerClient interface {
	ComposeFile(ctx context.Context, in *Files, opts ...grpc.CallOption) (Composer_ComposeFileClient, error)
}

type composerClient struct {
	cc grpc.ClientConnInterface
}

func NewComposerClient(cc grpc.ClientConnInterface) ComposerClient {
	return &composerClient{cc}
}

func (c *composerClient) ComposeFile(ctx context.Context, in *Files, opts ...grpc.CallOption) (Composer_ComposeFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Composer_serviceDesc.Streams[0], "/composer.Composer/ComposeFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &composerComposeFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Composer_ComposeFileClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type composerComposeFileClient struct {
	grpc.ClientStream
}

func (x *composerComposeFileClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ComposerServer is the server API for Composer service.
type ComposerServer interface {
	ComposeFile(*Files, Composer_ComposeFileServer) error
}

// UnimplementedComposerServer can be embedded to have forward compatible implementations.
type UnimplementedComposerServer struct {
}

func (*UnimplementedComposerServer) ComposeFile(*Files, Composer_ComposeFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ComposeFile not implemented")
}

func RegisterComposerServer(s *grpc.Server, srv ComposerServer) {
	s.RegisterService(&_Composer_serviceDesc, srv)
}

func _Composer_ComposeFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Files)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComposerServer).ComposeFile(m, &composerComposeFileServer{stream})
}

type Composer_ComposeFileServer interface {
	Send(*File) error
	grpc.ServerStream
}

type composerComposeFileServer struct {
	grpc.ServerStream
}

func (x *composerComposeFileServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

var _Composer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "composer.Composer",
	HandlerType: (*ComposerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ComposeFile",
			Handler:       _Composer_ComposeFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "PdfComposeService.proto",
}
